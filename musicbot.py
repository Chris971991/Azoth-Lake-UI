
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ttk, Scale


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()
window.title("Azoth Lake - v1.6")
window.geometry("800x400")
window.configure(bg = "#1E1D22")

# ----- Change the ttk style so that ComboBoxes can be modified ----- #
style = ttk.Style()
style.theme_use('alt')

# ----- Window Icon ----- #
p1 = PhotoImage(file=relative_to_assets("favicon.png"))
window.iconphoto(False, p1)

# ----- Canvas Settings ----- #
canvas = Canvas(
    window,
    bg = "#1E1D22",
    height = 400,
    width = 800,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

# ----- Canvas Background ----- #
canvas.place(x = 0, y = 0)
background_image = PhotoImage(
    file=relative_to_assets("musicbot/background.png"))
background = canvas.create_image(
    400.0,
    200.0,
    image=background_image
)

# ----- Version + Detection Headings - Text ----- #
canvas.create_text(
    5.0,
    370.0,
    anchor="nw",
    text="Client Version - \nDetection Status -",
    fill="#D5D5D5",
    font=("Montserrat Regular", 11 * -1)
)

# ----- Version Status - Text ----- #
canvas.create_text(
    90.0,
    370.0,
    anchor="nw",
    text="Updated",
    fill="#24FF00",
    font=("Montserrat Regular", 11 * -1)
)

# ----- Detection Status - Text ----- #
canvas.create_text(
    105.0,
    385.0,
    anchor="nw",
    text="Undetected",
    fill="#24FF00",
    font=("Montserrat Regular", 11 * -1)
)

# ----- Discord Details - Text ----- #
canvas.create_text(
    715.0,
    370.0,
    anchor="ne",
    text="Discord User - \nDiscord Server - ",
    fill="#D5D5D5",
    font=("Montserrat Regular", 11 * -1)
)

# ----- Program Creator Discord - Text ----- #
canvas.create_text(
    795.0,
    370.0,
    anchor="ne",
    text="AzothLake#0261",
    fill="#24FF00",
    font=("Montserrat Regular", 11 * -1)
)

# ----- Discord Server Link - Text ----- #
canvas.create_text(
    795.0,
    385.0,
    anchor="ne",
    text="vwWJCFkK6a",
    fill="#24FF00",
    font=("Montserrat Regular", 11 * -1)
)

# ----- Time Remaining Heading - Text ----- #
canvas.create_text(
    323.0,
    380.0,
    anchor="nw",
    text="Time Remaining - ",
    fill="#D5D5D5",
    font=("Montserrat Regular", 11 * -1)
)

# ----- Time Remaining - Text ----- #
canvas.create_text(
    426.0,
    380.0,
    anchor="nw",
    text="365 Days",
    fill="#24FF00",
    font=("Montserrat Regular", 11 * -1)
)

# ----- Bot Selection - Button ----- #
# -- Define the mouse enter and leave events
def on_enter(e):
    botselection_button_image = PhotoImage(file=relative_to_assets("musicbot/botselection_button-active.png"))
    botselection_button.config(image=botselection_button_image)
    botselection_button.image = botselection_button_image

def on_leave(e):
    botselection_button_image = PhotoImage(file=relative_to_assets("musicbot/botselection_button.png"))
    botselection_button.config(image=botselection_button_image)
    botselection_button.image = botselection_button_image 

# -- Create the button
botselection_button_image = PhotoImage(
    file=relative_to_assets("musicbot/botselection_button.png"))
botselection_button = Button(
    image=botselection_button_image,
    cursor="hand2",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("Bot Selection button clicked"),
    relief="flat"
)

# -- Place the button
botselection_button.place(
    x=408.0,
    y=295.0,
    width=135.0,
    height=32.0
)

# -- Bind the enter + leave events
botselection_button.bind("<Enter>", on_enter)
botselection_button.bind("<Leave>", on_leave)

# ----- Start Music Bot - Button ----- #
# -- Define the mouse enter and leave events
def on_enter(e):
    music_button_image = PhotoImage(file=relative_to_assets("musicbot/music_button-active.png"))
    music_button.config(image=music_button_image)
    music_button.image = music_button_image

def on_leave(e):
    music_button_image = PhotoImage(file=relative_to_assets("musicbot/music_button.png"))
    music_button.config(image=music_button_image)
    music_button.image = music_button_image 

# -- Create the button
music_button_image = PhotoImage(
    file=relative_to_assets("musicbot/music_button.png"))
music_button = Button(
    image=music_button_image,
    cursor="hand2",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("Music button clicked"),
    relief="flat"
)

# -- Place the button
music_button.place(
    x=332.0,
    y=336.0,
    width=135.0,
    height=32.0
)

# -- Bind the enter + leave events
music_button.bind("<Enter>", on_enter)
music_button.bind("<Leave>", on_leave)

# ----- Update Settings Button - Button ----- #
# -- Define the mouse enter and leave events
def on_enter(e):
    settings_button_image = PhotoImage(file=relative_to_assets("musicbot/settings_button-active.png"))
    settings_button.config(image=settings_button_image)
    settings_button.image = settings_button_image

def on_leave(e):
    settings_button_image = PhotoImage(file=relative_to_assets("musicbot/settings_button.png"))
    settings_button.config(image=settings_button_image)
    settings_button.image = settings_button_image 

# -- Create the button
settings_button_image = PhotoImage(
    file=relative_to_assets("musicbot/settings_button.png"))
settings_button = Button(
    image=settings_button_image,
    cursor="hand2",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("Settings button clicked"),
    relief="flat"
)

# -- Place the button
settings_button.place(
    x=256.0,
    y=295.0,
    width=135.0,
    height=32.0
)

# -- Bind the enter + leave events
settings_button.bind("<Enter>", on_enter)
settings_button.bind("<Leave>", on_leave)

# ----- Skip Tips Input Background - Image ----- #
combobox_background_image = PhotoImage(
    file=relative_to_assets("musicbot/combobox_background.png"))
combobox_background = canvas.create_image(
    397.0,
    118.5,
    image=combobox_background_image
)

# ----- Bait Input - ComboBox ----- #
# -- Define the custom styling for the bait combobox
style.map('custom.TCombobox', fieldbackground=[('readonly','#28272E')], foreground=[('readonly','#D5D5D5')], 
selectbackground=[('readonly','#28272E')], background=[('readonly','#28272E')], arrowcolor=[('readonly','#28272E')], 
arrowsize=[('readonly','-1')])

# -- List items for the bait combobox
baits = ["Skip", "Wait"]
bait_list_combo = ttk.Combobox(window, values=baits, state="readonly", font="Montserrat 10", style='custom.TCombobox', cursor="hand2")
bait_list_combo.set("Pick an option")
bait_list_combo.place(x=345, y=107, width=104)

# ----- Wait Heading - Image ----- #
wait_heading_image = PhotoImage(
    file=relative_to_assets("musicbot/wait_heading.png"))
wait_heading = canvas.create_image(
    397.0,
    87.0,
    image=wait_heading_image
)

# ----- Main Heading - Image ----- #
main_heading_image = PhotoImage(
    file=relative_to_assets("musicbot/main_heading.png"))
main_heading = canvas.create_image(
    407.0,
    32.0,
    image=main_heading_image
)

# ----- Instructions - Image ----- #
instructions_image = PhotoImage(
    file=relative_to_assets("musicbot/instructions.png"))
instructions = canvas.create_image(
    397.0,
    213.0,
    image=instructions_image
)
window.resizable(False, False)
window.mainloop()
